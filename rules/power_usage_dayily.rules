//! READ THIS:
// https://community.openhab.org/t/how-would-i-calculate-daily-weekly-monthly-values-off-an-item/68938/3

//Daily power usage:
// https://community.openhab.org/t/solved-power-usage-daily/70614/4

// cron-expression-generator
// https://www.freeformatter.com/cron-expression-generator-quartz.html#

// 0 0 6/1 ? * * *  -At second :00, at minute :00, every hour starting at 06am, of every day
// 45 0 0 ? * * *  -At 00:00:45am every day
//


// // // TODO   MAKE THE DAILY CALCULATIONS BASED ON METER READINGS WHITHOUT SAVING THE DAILY VALUES TO DB

rule "TEST persist CURRENT READINGS AND CALCULATED YESTERDAYS electric meter and power usage values"
when
    Item TEST_Triggering_Switch_4 changed  from OFF to ON
    // Time cron "45 0 0 ? * * *"  // At 00:00:45am every day in order to let other processes to finish calculations!!!
then
        // READ CURRENT VALUES TO VAL
        val current_reading_heat_pump = Meter_Total_KWh_heat_pump.state           
        val current_reading_well_pump = Meter_TotalKWh_well_pump.state           
        val current_reading_soalar_and_hw_recirc = Meter_TotalKWh_soalar_and_hw_recirculation.state
        val current_reading_water_heater = Meter_TotalKWh_water_heater.state        
        val current_reading_recuperator = Meter_TotalKWh_recuperator.state 
        val current_hvac_and_hot_water = current_reading_heat_pump as Number + current_reading_well_pump as Number + current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number + current_reading_recuperator as Number
        val current_heat_and_well_pump = current_reading_heat_pump as Number + current_reading_well_pump as Number 
        val current_solar_and_heater = current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number
        
        // READ OLD YESTERDAY VALUES TO VAL
        val yesterdays_reading_heat_pump = DB_kWh_TO_DATE_heat_pump.state           
        val yesterdays_reading_well_pump = DB_kWh_TO_DATE_well_pump.state           
        val yesterdays_reading_soalar_and_hw_recirc = DB_kWh_TO_DATE_soalar_and_hw_recirc.state
        val yesterdays_reading_water_heater = DB_kWh_TO_DATE_water_heater.state        
        val yesterdays_reading_recuperator = DB_kWh_TO_DATE_recuperator.state 
        val yesterdays_hvac_and_hot_water = DB_kWh_TO_DATE_SUM_hvac_and_hot_water.state
        val yesterdays_heat_and_well_pump = DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.state
        val yesterdays_solar_and_heater = DB_kWh_TO_DATE_SUM_solar_hw_and_heater.state

    
    val joda_time_now = new DateTime(now.millis)
// TEST_String_Item_1
// TEST_String_Item_2
// TEST_String_Item_3
// TEST_String_Item_4
// TEST_String_Item_5
// TEST_String_Item_6
// TEST_String_Item_7
        // TEST_String_Item_1.postUpdate("mina!!!!!!!")       
        TEST_String_Item_1.postUpdate(joda_time_now.toString)       
        // CALCULATE AND WRITE THE NEW CURRENT VALUES TO DB
        TEST_String_Item_2.postUpdate(current_hvac_and_hot_water)       
        TEST_String_Item_3.postUpdate((current_reading_heat_pump as Number) + (current_reading_well_pump as Number))
        TEST_String_Item_4.postUpdate((current_reading_soalar_and_hw_recirc as Number)+ (current_reading_water_heater as Number))
        // CALCULATE AND WRITE THE NEW YESTERDAY VALUES TO DB
        TEST_String_Item_5.postUpdate(current_hvac_and_hot_water as Number - yesterdays_hvac_and_hot_water as Number) 
        TEST_String_Item_6.postUpdate((current_heat_and_well_pump as Number) - (yesterdays_heat_and_well_pump as Number))          
        TEST_String_Item_7.postUpdate((current_solar_and_heater as Number) - (yesterdays_solar_and_heater as Number))


        // CALCULATE AND WRITE THE NEW CURRENT VALUES TO DB
        // DB_kWh_TO_DATE_SUM_hvac_and_hot_water.postUpdate(current_hvac_and_hot_water)       
        // DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.postUpdate((current_reading_heat_pump as Number) + (current_reading_well_pump as Number))
        // DB_kWh_TO_DATE_SUM_solar_hw_and_heater.postUpdate((current_reading_soalar_and_hw_recirc as Number)+ (current_reading_water_heater as Number))
        // DB_kWh_TO_DATE_heat_pump.postUpdate(current_reading_heat_pump)           
        // DB_kWh_TO_DATE_well_pump.postUpdate(current_reading_well_pump)           
        // DB_kWh_TO_DATE_soalar_and_hw_recirc.postUpdate(current_reading_soalar_and_hw_recirc)
        // DB_kWh_TO_DATE_water_heater.postUpdate(current_reading_water_heater)        
        // DB_kWh_TO_DATE_recuperator.postUpdate(current_reading_recuperator)

        // CALCULATE AND WRITE THE NEW YESTERDAY VALUES TO DB
        // DB_kWh_DAILY_SUM_hvac_and_hot_water.postUpdate(current_hvac_and_hot_water as Number - yesterdays_hvac_and_hot_water as Number) 
        // DB_kWh_DAILY_SUM_heat_pump_and_well_pump.postUpdate((current_heat_and_well_pump as Number) - (yesterdays_heat_and_well_pump as Number))          
        // DB_kWh_DAILY_SUM_solar_hw_and_heater.postUpdate((current_solar_and_heater as Number) - (yesterdays_solar_and_heater as Number))
        // DB_kWh_DAILY_heat_pump.postUpdate(current_reading_heat_pump as Number - yesterdays_reading_heat_pump as Number)           
        // DB_kWh_DAILY_well_pump.postUpdate(current_reading_well_pump as Number - yesterdays_reading_well_pump as Number)           
        // DB_kWh_DAILY_soalar_and_hw_recirc.postUpdate(current_reading_soalar_and_hw_recirc as Number - yesterdays_reading_soalar_and_hw_recirc as Number)
        // DB_kWh_DAILY_water_heater.postUpdate(current_reading_water_heater as Number - yesterdays_reading_water_heater as Number)        
        // DB_kWh_DAILY_recuperator.postUpdate(current_reading_recuperator as Number - yesterdays_reading_recuperator as Number) 

        logInfo("rule_save_to_db", "TEST!!! Meter values published to strings!!!")


end


// // // TODO   MAKE THE DAILY CALCULATIONS BASED ON METER READINGS WHITHOUT SAVING THE DAILY VALUES TO DB

rule "persist kWh To Date and Daily power usage"
when
    Time cron "45 0 0 ? * * *"  // At 00:00:45am every day in order to let other processes to finish calculations!!!
then
       logInfo("rule_save_to_db", "persist kWh To Date and Daily power usage!!!")
           sendNotification("shivarov@code.bg", "persist kWh To Date and Daily power usage")

        // READ CURRENT VALUES TO VAL
        val current_reading_heat_pump = Meter_Total_KWh_heat_pump.state           
        val current_reading_well_pump = Meter_TotalKWh_well_pump.state           
        val current_reading_soalar_and_hw_recirc = Meter_TotalKWh_soalar_and_hw_recirculation.state
        val current_reading_water_heater = Meter_TotalKWh_water_heater.state        
        val current_reading_recuperator = Meter_TotalKWh_recuperator.state 
        val current_hvac_and_hot_water = current_reading_heat_pump as Number + current_reading_well_pump as Number + current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number + current_reading_recuperator as Number
        val current_heat_and_well_pump = current_reading_heat_pump as Number + current_reading_well_pump as Number 
        val current_solar_and_heater = current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number
        
        // READ OLD YESTERDAY VALUES TO VAL
        val yesterdays_reading_heat_pump = DB_kWh_TO_DATE_heat_pump.state           
        val yesterdays_reading_well_pump = DB_kWh_TO_DATE_well_pump.state           
        val yesterdays_reading_soalar_and_hw_recirc = DB_kWh_TO_DATE_soalar_and_hw_recirc.state
        val yesterdays_reading_water_heater = DB_kWh_TO_DATE_water_heater.state        
        val yesterdays_reading_recuperator = DB_kWh_TO_DATE_recuperator.state 
        val yesterdays_hvac_and_hot_water = DB_kWh_TO_DATE_SUM_hvac_and_hot_water.state
        val yesterdays_heat_and_well_pump = DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.state
        val yesterdays_solar_and_heater = DB_kWh_TO_DATE_SUM_solar_hw_and_heater.state

        // CALCULATE AND WRITE THE NEW CURRENT VALUES TO DB
        DB_kWh_TO_DATE_SUM_hvac_and_hot_water.postUpdate(current_hvac_and_hot_water)       
        DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.postUpdate((current_reading_heat_pump as Number) + (current_reading_well_pump as Number))
        DB_kWh_TO_DATE_SUM_solar_hw_and_heater.postUpdate((current_reading_soalar_and_hw_recirc as Number)+ (current_reading_water_heater as Number))
        DB_kWh_TO_DATE_heat_pump.postUpdate(current_reading_heat_pump)           
        DB_kWh_TO_DATE_well_pump.postUpdate(current_reading_well_pump)           
        DB_kWh_TO_DATE_soalar_and_hw_recirc.postUpdate(current_reading_soalar_and_hw_recirc)
        DB_kWh_TO_DATE_water_heater.postUpdate(current_reading_water_heater)        
        DB_kWh_TO_DATE_recuperator.postUpdate(current_reading_recuperator)

        // CALCULATE AND WRITE THE NEW YESTERDAY VALUES TO DB
        DB_kWh_DAILY_SUM_hvac_and_hot_water.postUpdate(current_hvac_and_hot_water as Number - yesterdays_hvac_and_hot_water as Number) 
        DB_kWh_DAILY_SUM_heat_pump_and_well_pump.postUpdate((current_heat_and_well_pump as Number) - (yesterdays_heat_and_well_pump as Number))          
        DB_kWh_DAILY_SUM_solar_hw_and_heater.postUpdate((current_solar_and_heater as Number) - (yesterdays_solar_and_heater as Number))
        DB_kWh_DAILY_heat_pump.postUpdate(current_reading_heat_pump as Number - yesterdays_reading_heat_pump as Number)           
        DB_kWh_DAILY_well_pump.postUpdate(current_reading_well_pump as Number - yesterdays_reading_well_pump as Number)           
        DB_kWh_DAILY_soalar_and_hw_recirc.postUpdate(current_reading_soalar_and_hw_recirc as Number - yesterdays_reading_soalar_and_hw_recirc as Number)
        DB_kWh_DAILY_water_heater.postUpdate(current_reading_water_heater as Number - yesterdays_reading_water_heater as Number)        
        DB_kWh_DAILY_recuperator.postUpdate(current_reading_recuperator as Number - yesterdays_reading_recuperator as Number) 

        logInfo("rule_save_to_db", "Meter values persisted in database!!!")


end



// rule "TEST initial persist of TO DATE value"
// when
//     Item TEST_Triggering_Switch_1 received update
// then
//     if (TEST_Triggering_Switch_1.state == ON){
//         // DB_kWh_TO_DATE_heat_pump.postUpdate(380.72)           
//         // DB_kWh_TO_DATE_well_pump.postUpdate(83.90)           
//         // DB_kWh_TO_DATE_soalar_and_hw_recirc.postUpdate(10.23)
//         // DB_kWh_TO_DATE_water_heater.postUpdate(12.41)        
//         // DB_kWh_TO_DATE_recuperator.postUpdate(0.23) 
//         // DB_kWh_TO_DATE_SUM_hvac_and_hot_water.postUpdate(487.49)       
//         // DB_kWh_TO_DATE_SUM_solar_hw_and_heater.postUpdate(22.64)
//         // DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.postUpdate(464.62)          
//     logInfo("rule", "Initial persist of TO DATE value !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    
//     }
//     // TEST_Meter_DATA_DAILY_KWh_heat_pump.postUpdate(0.23)
//     // postUpdate(Daily_Power_Usage_all_hvac_and_hot_water,268.35)
    

// end


// logInfo("Test","Item_last:   {}",Item.state)
// logInfo("Test","Item_-1:     {}",Item.previousState(true).state)
// logInfo("Test","Time_last:    {}",Item.lastUpdate.millis)
// logInfo("Test","Time_-1:      {}",Item.previousState(true).timestamp.time)
// logInfo("Test","Time_diff:     {}",Item.lastUpdate.millis-Item.previousState(true).timestamp.time)
// Item.lastUpdate will use whatever database you have defined as default.
// You need Item.lastUpdate(“influxdb”) if the default is different.

// rule "TEST initial persist of DAILY value"
// when
//     Item TEST_Triggering_Switch_2 received update
// then
//     if (TEST_Triggering_Switch_2.state == ON){
//         // TEST_Meter_DATA_DAILY_KWh_heat_pump.postUpdate((TEST_Meter_DATA_TO_DATE_KWh_heat_pump.state as Number)-)  // USE LAST?????
//         // val current_reading_reading_heat_pump =Meter_Total_KWh_heat_pump.state
//         // logInfo("Test","Meter_Total_KWh_heat_pump_last:   {}",current_reading_reading_heat_pump)
//         // logInfo("Test","TEST_Meter_DATA_TO_DATE_KWh_heat_pump_last:   {}",DB_kWh_TO_DATE_heat_pump.state)
//         // logInfo("Test","DAILY POWER CONSUMPTION:   {}",(current_reading_reading_heat_pump as Number)-(DB_kWh_TO_DATE_heat_pump.state as Number))
//         // logInfo("Test","Meter_Total_KWh_heat_pump_last:   {}",Meter_Total_KWh_heat_pump.state)
//         // logInfo("Test","TEST_Meter_DATA_TO_DATE_KWh_heat_pump_last:   {}",DB_kWh_TO_DATE_heat_pump.state)

//         // logInfo("Test","DAILY POWER CONSUMPTION:   {}",(Meter_Total_KWh_heat_pump.state as Number)-(DB_kWh_TO_DATE_heat_pump.state as Number))
// //     Daily_Power_Usage_all_hvac_and_hot_water.postUpdate((Gr_HR_Total_KWh.state as DecimalType) -(Daily_Power_Usage_all_hvac_and_hot_water.state as DecimalType)) //Gr_HR_Total_KWh
// //     Daily_Power_Usage_solar_hv_recirc_el_heater.postUpdate((Gr_HR_Total_KWh_Solar_ElectricHeater_And_HW_Recirc_pump.state as DecimalType) -(Daily_Power_Usage_solar_hv_recirc_el_heater.state as DecimalType)) //Gr_HR_Total_KWh_Solar_ElectricHeater_And_HW_Recirc_pump
// //     Daily_Power_Usage_heat_pump_and_well_pump.postUpdate((Gr_HR_Total_KWh_HeatPump_And_WellPump.state as DecimalType) -(Daily_Power_Usage_heat_pump_and_well_pump.state as DecimalType)) //Gr_HR_Total_KWh_HeatPump_And_WellPump
// //     Daily_Power_Usage_heat_pump.postUpdate((Meter_Total_KWh_heat_pump.state as DecimalType) -(Daily_Power_Usage_heat_pump.state as DecimalType)) //Meter_Total_KWh_heat_pump
// //     Daily_Power_Usage_well_pump.postUpdate((Meter_TotalKWh_well_pump.state as DecimalType) -(Daily_Power_Usage_well_pump.state as DecimalType)) //Meter_TotalKWh_well_pump
// //     Daily_Power_Usage_soalar_and_hw_recirc.postUpdate((Meter_TotalKWh_soalar_and_hw_recirculation.state as DecimalType) -(Daily_Power_Usage_soalar_and_hw_recirc.state as DecimalType)) //Meter_TotalKWh_soalar_and_hw_recirculation
// //     Daily_Power_Usage_water_heater.postUpdate((Meter_TotalKWh_soalar_and_hw_recirculation.state as DecimalType) -(Daily_Power_Usage_water_heater.state as DecimalType))//Meter_TotalKWh_soalar_and_hw_recirculation
// //     Daily_Power_Usage_recuperator.postUpdate((Meter_TotalKWh_recuperator.state as DecimalType) -(Daily_Power_Usage_recuperator.state as DecimalType)) //Meter_TotalKWh_recuperator



//         // val current_reading_heat_pump = Meter_Total_KWh_heat_pump.state           
//         // val current_reading_well_pump = Meter_TotalKWh_well_pump.state           
//         // val current_reading_soalar_and_hw_recirc = Meter_TotalKWh_soalar_and_hw_recirculation.state
//         // val current_reading_water_heater = Meter_TotalKWh_water_heater.state        
//         // val current_reading_recuperator = Meter_TotalKWh_recuperator.state 
//         // // val current_total_to_date = current_reading_heat_pump as Number + current_reading_well_pump as Number + current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number + current_reading_recuperator as Number
//         // val current_hvac_and_hot_water = current_reading_heat_pump as Number + current_reading_well_pump as Number + current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number + current_reading_recuperator as Number
//         // val current_heat_and_well_pump = current_reading_heat_pump as Number + current_reading_well_pump as Number 
//         // val current_solar_and_heater = current_reading_soalar_and_hw_recirc as Number + current_reading_water_heater as Number

//         // val yesterdays_reading_heat_pump = DB_kWh_TO_DATE_heat_pump.state           
//         // val yesterdays_reading_well_pump = DB_kWh_TO_DATE_well_pump.state           
//         // val yesterdays_reading_soalar_and_hw_recirc = DB_kWh_TO_DATE_soalar_and_hw_recirc.state
//         // val yesterdays_reading_water_heater = DB_kWh_TO_DATE_water_heater.state        
//         // val yesterdays_reading_recuperator = DB_kWh_TO_DATE_recuperator.state 
        
//         // val yesterdays_hvac_and_hot_water = TEST_DB_kWh_TO_DATE_SUM_hvac_and_hot_water.state
//         // val yesterdays_heat_and_well_pump = TEST_DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.state
//         // val yesterdays_solar_and_heater = TEST_DB_kWh_TO_DATE_SUM_solar_hv_recirc_el_heater.state
        


//     // TEST_DB_kWh_TO_DATE_SUM_hvac_and_hot_water.postUpdate(current_reading_heat_pump as Number + current_reading_well_pump as Number)

//         // logInfo("test","current_hvac_and_hot_water:   {}",current_hvac_and_hot_water as Number)
//         // logInfo("test","current_heat_and_well_pump:   {}",current_heat_and_well_pump as Number)
//         // logInfo("test","current_solar_and_heater:   {}",current_solar_and_heater as Number)




//         // TEST_DB_kWh_TO_DATE_SUM_hvac_and_hot_water.postUpdate(current_hvac_and_hot_water)       
//         // TEST_DB_kWh_TO_DATE_SUM_heat_pump_and_well_pump.postUpdate((current_reading_heat_pump as Number) + (current_reading_well_pump as Number))

//         // TEST_DB_kWh_DAILY_SUM_solar_hw_and_heater.postUpdate((current_reading_soalar_and_hw_recirc as Number)+ (current_reading_water_heater as Number))

//         // TEST_DB_kWh_TO_DATE_heat_pump.postUpdate(current_reading_heat_pump)           
//         // TEST_DB_kWh_TO_DATE_well_pump.postUpdate(current_reading_well_pump)           
//         // TEST_DB_kWh_TO_DATE_soalar_and_hw_recirc.postUpdate(current_reading_soalar_and_hw_recirc)
//         // TEST_DB_kWh_TO_DATE_water_heater.postUpdate(current_reading_water_heater)        
//         // TEST_DB_kWh_TO_DATE_recuperator.postUpdate(current_reading_recuperator) 

//         // TEST_DB_kWh_DAILY_SUM_hvac_and_hot_water.postUpdate(current_hvac_and_hot_water as Number - yesterdays_hvac_and_hot_water as Number) 
//         // TEST_DB_kWh_DAILY_SUM_heat_pump_and_well_pump.postUpdate((current_heat_and_well_pump as Number) - (yesterdays_heat_and_well_pump as Number))          
//         // TEST_DB_kWh_DAILY_SUM_solar_hw_and_heater.postUpdate((current_solar_and_heater as Number) - (yesterdays_solar_and_heater as Number))
//         // TEST_DB_kWh_DAILY_heat_pump.postUpdate(current_reading_heat_pump as Number - yesterdays_reading_heat_pump as Number)           
//         // TEST_DB_kWh_DAILY_well_pump.postUpdate(current_reading_well_pump as Number - yesterdays_reading_well_pump as Number)           
//         // TEST_DB_kWh_DAILY_soalar_and_hw_recirc.postUpdate(current_reading_soalar_and_hw_recirc as Number - yesterdays_reading_soalar_and_hw_recirc as Number)
//         // TEST_DB_kWh_DAILY_water_heater.postUpdate(current_reading_water_heater as Number - yesterdays_reading_water_heater as Number)        
//         // TEST_DB_kWh_DAILY_recuperator.postUpdate(current_reading_recuperator as Number - yesterdays_reading_recuperator as Number) 


//             // logInfo("Test","TEST_Meter_DATA_TO_DATE_KWh_heat_pump_-1:     {}",TEST_Meter_DATA_TO_DATE_KWh_heat_pump.previousState(true).state)
//         // logInfo("Test","TEST_Meter_DATA_TO_DATE_KWh_heat_pump Time_last:    {}",TEST_Meter_DATA_TO_DATE_KWh_heat_pump.lastUpdate.millis)
//         // logInfo("Test","Time_-1:      {}",Item.previousState(true).timestamp.time)
//         // logInfo("Test","Time_diff:     {}",Item.lastUpdate.millis-Item.previousState(true).timestamp.time)
        
//         logInfo("chron", "TEST persist of DAILY value!")
//     }
//     // TEST_Meter_DATA_DAILY_KWh_heat_pump.postUpdate(0.23)
//     // postUpdate(Daily_Power_Usage_all_hvac_and_hot_water,268.35)
    

// end

// var initial // !!!!!!!!ПЪРВИ ЗАПИС НА 31.3.2020!!!!!!!!!!!!!!

// rule "initial persist"
// when
//     // Time cron "0 * * ? * * *" //every 1 minutes
//     // Time cron "*/5 * * * *" //every 5 minutes
//     Time cron "0 0 6/1 ? * * *"  //every hour
// then
//     postUpdate(Daily_Power_Usage_all_hvac_and_hot_water,268.35)
//     postUpdate(Daily_Power_Usage_solar_hv_recirc_el_heater,10.59)
//     Daily_Power_Usage_heat_pump_and_well_pump.postUpdate(256.85)
//     Daily_Power_Usage_heat_pump.postUpdate(210.58)
//     Daily_Power_Usage_well_pump.postUpdate(46.33)
//     Daily_Power_Usage_soalar_and_hw_recirc.postUpdate(6.99)
//     Daily_Power_Usage_water_heater.postUpdate(3.6)
//     Daily_Power_Usage_recuperator.postUpdate(0.23)
    
//     logInfo("chron", "MINAAAAAAAAAAAAAAAAAAAA !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

// end

// .postUpdate(PowerMeterTotal.state)

// https://community.openhab.org/t/rule-to-work-with-float/78041/5

// rule "Save meter readings at midnight"
// when
//     // Time is midnight
//     Time cron "0 37 7 ? * * *" //7:37am Every day
// then


//     Daily_Power_Usage_all_hvac_and_hot_water.postUpdate((Gr_HR_Total_KWh.state as DecimalType) -(Daily_Power_Usage_all_hvac_and_hot_water.state as DecimalType)) //Gr_HR_Total_KWh
//     Daily_Power_Usage_solar_hv_recirc_el_heater.postUpdate((Gr_HR_Total_KWh_Solar_ElectricHeater_And_HW_Recirc_pump.state as DecimalType) -(Daily_Power_Usage_solar_hv_recirc_el_heater.state as DecimalType)) //Gr_HR_Total_KWh_Solar_ElectricHeater_And_HW_Recirc_pump
//     Daily_Power_Usage_heat_pump_and_well_pump.postUpdate((Gr_HR_Total_KWh_HeatPump_And_WellPump.state as DecimalType) -(Daily_Power_Usage_heat_pump_and_well_pump.state as DecimalType)) //Gr_HR_Total_KWh_HeatPump_And_WellPump
//     Daily_Power_Usage_heat_pump.postUpdate((Meter_Total_KWh_heat_pump.state as DecimalType) -(Daily_Power_Usage_heat_pump.state as DecimalType)) //Meter_Total_KWh_heat_pump
//     Daily_Power_Usage_well_pump.postUpdate((Meter_TotalKWh_well_pump.state as DecimalType) -(Daily_Power_Usage_well_pump.state as DecimalType)) //Meter_TotalKWh_well_pump
//     Daily_Power_Usage_soalar_and_hw_recirc.postUpdate((Meter_TotalKWh_soalar_and_hw_recirculation.state as DecimalType) -(Daily_Power_Usage_soalar_and_hw_recirc.state as DecimalType)) //Meter_TotalKWh_soalar_and_hw_recirculation
//     Daily_Power_Usage_water_heater.postUpdate((Meter_TotalKWh_soalar_and_hw_recirculation.state as DecimalType) -(Daily_Power_Usage_water_heater.state as DecimalType))//Meter_TotalKWh_soalar_and_hw_recirculation
//     Daily_Power_Usage_recuperator.postUpdate((Meter_TotalKWh_recuperator.state as DecimalType) -(Daily_Power_Usage_recuperator.state as DecimalType)) //Meter_TotalKWh_recuperator


// end

// rule "power consumption min/max/range"
// when
//     Item Pump_Consumption changed
// then
//     val max = Pump_Consumption.maximumSince(now.withTimeAtStartOfDay)
//     val min = Pump_Consumption.minimumSince(now.withTimeAtStartOfDay)    
    
//     if (max !== null && min !== null) {
//         val range = (Pump_Consumption_Max.state as Number).intValue - (Pump_Consumption_Min.state as Number).intValue

//         postUpdate(Pump_Consumption_Max, max.state)
//         postUpdate(Pump_Consumption_Min, min.state)
//         postUpdate(Pump_Consumption_Range, range)
//     }